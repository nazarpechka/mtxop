Changelog for matrix operations optimization:

Note: In general transposing second matrix before multiplication is 
slower than swapping the loops due to the overhead of
creating another matrix, so its not included.

-> speedTest() iter=1000, size=100, tests=30 - swapping operations:

Reference (RefAlgebra)                                  - 2.23sec (Q=1.0)
Pseudo 2d array                                         - 1.90sec (Q=1.17)
Pseudo 2d array + multithreading                        - 0.64sec (Q=3.48)
Pseudo 2d array + swapping loops                        - 0.30sec (Q=7.43)
Pseudo 2d array + swapping loops  + multithreading      - 0.20sec (Q=11.15)

Multithreaded Eigen is 0.16sec, this is the best possible result (Q=14.52)

-> multSpeedTest() iter=10, size=1024, tests=25 - multiplication:

Reference (RefAlgebra)                                  - 18.96sec (Q=1.0)
Pseudo 2d array                                         - 18.61sec (Q=1.01)
Pseudo 2d array + multithreading                        - 5.06sec  (Q=3.74)
Pseudo 2d array + swapping loops                        - 1.06sec  (Q=17.88)
Pseudo 2d array + swapping loops + multithreading       - 0.30sec  (Q=63.2)

